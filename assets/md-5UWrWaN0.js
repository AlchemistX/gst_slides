import{b as r,o as u,w as t,g as l,B as s,v as m,x as p,C as n}from"./modules/vue-DhAglAFb.js";import{_ as c}from"./05-overview-03-CK6qVxPg.js";import{_ as d}from"./top-title-DXL6wPsa.js";import{u as f,f as _}from"./slidev/context-DBUmR2Lv.js";import"./layoutHelper-HtdtuDyr.js";import"./index-CAm3x-8s.js";import"./modules/shiki-B1249S1Y.js";const A={__name:"05-overview.md__slidev_84",setup(x){const{$clicksContext:i,$frontmatter:a}=f();return i.setup(),(v,e)=>(u(),r(d,m(p(n(_)(n(a),83))),{title:t(o=>[...e[0]||(e[0]=[l("h1",null,"GStreamer Overview",-1)])]),content:t(o=>[...e[1]||(e[1]=[l("figure",{class:"text-center"},[l("div",{class:"w-full mx-auto"},[l("img",{src:c,class:"w-auto h-20 max-h-[75vh] object-contain mx-auto block shadow-md rounded-lg"})])],-1),l("div",{class:"ns-c-tight text-xs"},[l("div",{class:"mt-3"},[l("h4",null,"Pipeline의 상태 전환 매커니즘"),l("ul",null,[l("li",null,"Pipeline 에 Element 가 추가되고 서로의 pads 를 연결 하였다면 dataflow 를 시작할 수 있음."),l("li",null,[s("Pipeline 은 Bin 이고, Bin 에 상태 변경을 요청하면 이것이 보관하는 모든 자식 Element의 상태를 변경 한다. "),l("ul",null,[l("li",null,"Sink Element 에서 Source Element 방향으로 상태 변경을 수행한다."),l("li",null,"데이터를 수신할 준비가 되지 않은 downstream elements 에게 데이터를 전달하지 않기 위한 순서.")])])])]),l("div",{class:"mt-3"},[l("h4",null,"Pipeline 예제에서 상태 전환 시 일어나는 일 : NULL -> READY -> PAUSED"),l("ul",null,[l("li",null,"alsasink -> mp3dec -> filesrc 순서로 상태 전환됨"),l("li",null,[s("NULL -> READY "),l("ul",null,[l("li",null,"alsasink : 오디오 장치가 프로브 된다."),l("li",null,"mp3dec : 아무 일도 일어나지 않는다."),l("li",null,"filesrc : 파일이 프로브 된다.")])]),l("li",null,[s("READY -> PAUSED "),l("ul",null,[l("li",null,"alsasink : 오디오 장치가 열린다. alsasink 는 sink 이며, 아직 데이터를 수신하지 못했기에 ASYNC 리턴."),l("li",null,"mp3dec : 디코딩 라이브러리 초기화"),l("li",null,"filesrc : 파일이 열리고 데이터를 mp3dec 로 push 하는 스레드가 시작된다.")])])])])],-1)])]),_:1},16))}};export{A as default};
